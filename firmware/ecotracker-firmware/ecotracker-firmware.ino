#include "arduino_secrets.h"
#include <Wire.h> // Needed for I2C
#include <SparkFun_MAX1704x_Fuel_Gauge_Arduino_Library.h>
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/12b836a5-13b5-492c-89bf-080009183fc9

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudAcceleration accel_X;
  CloudAcceleration accel_Y;
  CloudAcceleration accel_Z;
  int battery;
  CloudLocation gps;


  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
// #include <Arduino_MKRGPS.h>
#include <Arduino.h>

#define STEP_TIME_MS 1000 //Update to the next step

SFE_MAX1704X lipo; // Defaults to the MAX17043

//Setup Timers
static int actionIndex = 0;
static unsigned long previousTime = 0;


void readBattery(){
  voltage = lipo.getVoltage();
  battery_charge = lipo.getSOC(); // Estimated percentage
}

void readIMU(){
  imu = random(100, 201);
}

void setup()
{
  // Initialize serial and wait for port to open:
  Serial.begin(9600);

  // Defined in thingProperties.h
  initProperties();

  // initialize serial communications and wait for port to open:
  Serial.begin(9600);
  //while (!Serial)
  //{
  //  ; // wait for serial port to connect. Needed for native USB port only
  //}
  
  // Set up the MAX17043 LiPo fuel gauge:
  Wire.begin();
  if (lipo.begin() == false) // Connect to the MAX17043 using the default wire port
  {
    Serial.println(F("MAX17043 not detected. Please check wiring. Freezing."));
    while (1)
      ;
  }
  lipo.quickStart();

  // If you are using the MKR GPS as shield, change the next line to pass
  // the GPS_MODE_SHIELD parameter to the GPS.begin(...)
  // if (!GPS.begin(GPS_MODE_SHIELD))
  // {
  //   //Serial.println("Failed to initialize GPS!");
  //   while (1)
  //     ;
  // }

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();
}

void loop()
{
  unsigned long currentTime = millis();

  // Check if it's time to perform the next action
  if (currentTime - previousTime >= STEP_TIME_MS) {
    // Perform action based on actionIndex
    switch (actionIndex) {
      case 0:
        readBattery();
        Serial.print("Updating Battery Voltage: ");
        Serial.print(voltage);
        Serial.print("\n");

        Serial.print("Updating Battery Charge: ");
        Serial.print(battery_charge);
        Serial.print("\n");
        break;
      case 1:
        readIMU();
        //Serial.println("Updating IMU");
        break;
      case 2:
        ArduinoCloud.update();
        //Serial.println("Sending Data to the cloud");
        break;
    }

    // Move to the next action
    actionIndex = (actionIndex + 1) % 3;

    // Update previousTime for next action
    previousTime = currentTime;
  }
}
